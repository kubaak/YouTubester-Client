/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * YouTubester.Api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CopyVideoTemplateRequest
} from '.././';





export const postApiVideosCopyTemplate = (
    copyVideoTemplateRequest: CopyVideoTemplateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.post(
      `/api/videos/copy-template`,
      copyVideoTemplateRequest,options
    );
  }



export const getPostApiVideosCopyTemplateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext> => {

const mutationKey = ['postApiVideosCopyTemplate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, {data: CopyVideoTemplateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiVideosCopyTemplate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiVideosCopyTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>>
    export type PostApiVideosCopyTemplateMutationBody = CopyVideoTemplateRequest
    export type PostApiVideosCopyTemplateMutationError = AxiosError<unknown>

    export const usePostApiVideosCopyTemplate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiVideosCopyTemplate>>,
        TError,
        {data: CopyVideoTemplateRequest},
        TContext
      > => {

      const mutationOptions = getPostApiVideosCopyTemplateMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    