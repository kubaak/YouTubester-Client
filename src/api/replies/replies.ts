/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * YouTubester.Api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BatchDecisionResultDto,
  BatchIgnoreResult,
  DraftDecisionDto,
  ProblemDetails,
  Reply,
  ValidationProblemDetails
} from '.././';





export const getApiReplies = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Reply[]>> => {
    
    
    return axios.default.get(
      `/api/replies`,options
    );
  }




export const getGetApiRepliesQueryKey = () => {
    return [
    `/api/replies`
    ] as const;
    }

    
export const getGetApiRepliesQueryOptions = <TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRepliesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReplies>>> = ({ signal }) => getApiReplies({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRepliesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReplies>>>
export type GetApiRepliesQueryError = AxiosError<unknown>


export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReplies>>,
          TError,
          Awaited<ReturnType<typeof getApiReplies>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReplies>>,
          TError,
          Awaited<ReturnType<typeof getApiReplies>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRepliesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteApiRepliesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/replies/${id}`,options
    );
  }



export const getDeleteApiRepliesIdMutationOptions = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRepliesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiRepliesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiRepliesId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiRepliesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiRepliesId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRepliesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiRepliesId>>>
    
    export type DeleteApiRepliesIdMutationError = AxiosError<ProblemDetails>

    export const useDeleteApiRepliesId = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiRepliesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiRepliesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiRepliesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postApiRepliesApprove = (
    draftDecisionDto: DraftDecisionDto[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BatchDecisionResultDto>> => {
    
    
    return axios.default.post(
      `/api/replies/approve`,
      draftDecisionDto,options
    );
  }



export const getPostApiRepliesApproveMutationOptions = <TError = AxiosError<ValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext> => {

const mutationKey = ['postApiRepliesApprove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRepliesApprove>>, {data: DraftDecisionDto[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiRepliesApprove(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRepliesApproveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRepliesApprove>>>
    export type PostApiRepliesApproveMutationBody = DraftDecisionDto[]
    export type PostApiRepliesApproveMutationError = AxiosError<ValidationProblemDetails>

    export const usePostApiRepliesApprove = <TError = AxiosError<ValidationProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRepliesApprove>>,
        TError,
        {data: DraftDecisionDto[]},
        TContext
      > => {

      const mutationOptions = getPostApiRepliesApproveMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postApiRepliesBatchIgnore = (
    postApiRepliesBatchIgnoreBody: string[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BatchIgnoreResult>> => {
    
    
    return axios.default.post(
      `/api/replies/batch-ignore`,
      postApiRepliesBatchIgnoreBody,options
    );
  }



export const getPostApiRepliesBatchIgnoreMutationOptions = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>, TError,{data: string[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>, TError,{data: string[]}, TContext> => {

const mutationKey = ['postApiRepliesBatchIgnore'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>, {data: string[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiRepliesBatchIgnore(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRepliesBatchIgnoreMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>>
    export type PostApiRepliesBatchIgnoreMutationBody = string[]
    export type PostApiRepliesBatchIgnoreMutationError = AxiosError<ProblemDetails>

    export const usePostApiRepliesBatchIgnore = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>, TError,{data: string[]}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRepliesBatchIgnore>>,
        TError,
        {data: string[]},
        TContext
      > => {

      const mutationOptions = getPostApiRepliesBatchIgnoreMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    