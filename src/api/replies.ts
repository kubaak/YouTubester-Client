/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * YouTubester.Api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  BatchDecisionResultDto,
  CopyVideoTemplateRequest,
  DeleteApiRepliesParams,
  DraftDecisionDto
} from './';

export const getApiReplies = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/api/Replies`,options
    );
  }


export const getGetApiRepliesQueryKey = () => {
    return [`/api/Replies`] as const;
    }

    
export const getGetApiRepliesQueryOptions = <TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiRepliesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiReplies>>> = ({ signal }) => getApiReplies({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiRepliesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiReplies>>>
export type GetApiRepliesQueryError = AxiosError<unknown>


export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReplies>>,
          TError,
          Awaited<ReturnType<typeof getApiReplies>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiReplies>>,
          TError,
          Awaited<ReturnType<typeof getApiReplies>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiReplies<TData = Awaited<ReturnType<typeof getApiReplies>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiReplies>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiRepliesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteApiReplies = (
    params?: DeleteApiRepliesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/api/Replies`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteApiRepliesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiReplies>>, TError,{params?: DeleteApiRepliesParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiReplies>>, TError,{params?: DeleteApiRepliesParams}, TContext> => {

const mutationKey = ['deleteApiReplies'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiReplies>>, {params?: DeleteApiRepliesParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiReplies(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiRepliesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiReplies>>>
    
    export type DeleteApiRepliesMutationError = AxiosError<unknown>

    export const useDeleteApiReplies = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiReplies>>, TError,{params?: DeleteApiRepliesParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiReplies>>,
        TError,
        {params?: DeleteApiRepliesParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiRepliesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiRepliesApprove = (
    draftDecisionDto: DraftDecisionDto[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BatchDecisionResultDto>> => {
    
    
    return axios.default.post(
      `/api/Replies/approve`,
      draftDecisionDto,options
    );
  }



export const getPostApiRepliesApproveMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext> => {

const mutationKey = ['postApiRepliesApprove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRepliesApprove>>, {data: DraftDecisionDto[]}> = (props) => {
          const {data} = props ?? {};

          return  postApiRepliesApprove(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRepliesApproveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRepliesApprove>>>
    export type PostApiRepliesApproveMutationBody = DraftDecisionDto[]
    export type PostApiRepliesApproveMutationError = AxiosError<unknown>

    export const usePostApiRepliesApprove = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRepliesApprove>>, TError,{data: DraftDecisionDto[]}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRepliesApprove>>,
        TError,
        {data: DraftDecisionDto[]},
        TContext
      > => {

      const mutationOptions = getPostApiRepliesApproveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const postApiVideosCopyTemplate = (
    copyVideoTemplateRequest: CopyVideoTemplateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.post(
      `/api/videos/copy-template`,
      copyVideoTemplateRequest,options
    );
  }



export const getPostApiVideosCopyTemplateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext> => {

const mutationKey = ['postApiVideosCopyTemplate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, {data: CopyVideoTemplateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiVideosCopyTemplate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiVideosCopyTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>>
    export type PostApiVideosCopyTemplateMutationBody = CopyVideoTemplateRequest
    export type PostApiVideosCopyTemplateMutationError = AxiosError<unknown>

    export const usePostApiVideosCopyTemplate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVideosCopyTemplate>>, TError,{data: CopyVideoTemplateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiVideosCopyTemplate>>,
        TError,
        {data: CopyVideoTemplateRequest},
        TContext
      > => {

      const mutationOptions = getPostApiVideosCopyTemplateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
